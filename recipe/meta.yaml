{% set version = "10.0.0" %}
{% set cuda_enabled = cuda_compiler_version != "None" %}
{% set build_ext_version = "3.0.0" %}
{% set build_ext = "cuda" if cuda_enabled else "cpu" %}
{% set proc_build_number = "0" %}
{% set llvm_version = "14" %}

package:
  name: apache-arrow
  version: {{ version }}

source:
  url: https://dist.apache.org/repos/dist/release/arrow/arrow-{{ version }}/apache-arrow-{{ version }}.tar.gz
  sha256: 5b46fa4c54f53e5df0019fe0f9d421e93fc906b625ebe8e89eed010d561f1f12

build:
  number: 0
  # for cuda support, building with one version is enough to be compatible with
  # all later versions, since arrow is only using libcuda, and not libcudart.
  skip: true  # [cuda_compiler_version not in ("None", cuda_compiler_version_min)]
  run_exports:
    - {{ pin_subpackage("libarrow", max_pin="x.x.x") }}

outputs:
  - name: apache-arrow-proc
    version: {{ build_ext_version }}
    build:
      number: {{ proc_build_number }}
      string: {{ build_ext }}
      ignore_run_exports_from:
        - openssl
    requirements:
      host:
        # ensure we split the CI jobs per openssl version
        - openssl
    test:
      commands:
        - exit 0
    about:
      home: http://github.com/apache/arrow
      license: Apache-2.0
      license_file:
        - LICENSE.txt
      summary: A meta-package to select Arrow build variant

  # compat output for old mutex-package naming
  - name: arrow-cpp-proc
    version: {{ build_ext_version }}
    build:
      number: {{ proc_build_number }}
      string: {{ build_ext }}
      ignore_run_exports_from:
        - openssl
    requirements:
      host:
        # ensure we split the CI jobs per openssl version
        - openssl
      run:
        - apache-arrow-proc ={{ build_ext_version }}={{ build_ext }}
    test:
      commands:
        - exit 0

  - name: libarrow
    script: build-arrow.sh  # [not win]
    script: bld-arrow.bat   # [win]
    version: {{ version }}
    build:
      string: h{{ PKG_HASH }}_{{ PKG_BUILDNUM }}_{{ build_ext }}
      run_exports:
        - {{ pin_subpackage("libarrow", max_pin="x.x.x") }}
      ignore_run_exports:
        - cudatoolkit
      track_features: {{ "[arrow-cuda]" if cuda_enabled else "" }}
      missing_dso_whitelist:
        - "*/libcuda.so.*"    # [linux]
        - "*/nvcuda.dll"      # [win]
    requirements:
      build:
        - clangdev {{ llvm_version }}            # [osx and arm64]
        - llvmdev {{ llvm_version }}             # [osx and arm64]
        - gnuconfig                              # [osx and arm64]
        - libgrpc
        - libprotobuf
        - cmake
        - autoconf  # [unix]
        - ninja
        - make  # [unix]
        - {{ compiler('c') }}
        - {{ compiler('cxx') }}
        - {{ compiler("cuda") }}  # [cuda_compiler_version != "None"]
      host:
        - clangdev {{ llvm_version }}
        - llvmdev {{ llvm_version }}
        - aws-sdk-cpp
        - boost-cpp >=1.70
        - brotli
        - bzip2
        - c-ares
        - gflags
        - glog
        - google-cloud-cpp
        - libabseil
        # since libgoogle-cloud is static on windows, see
        # https://github.com/conda-forge/google-cloud-cpp-feedstock/pull/108,
        # its dependencies leak into the build here
        - libcrc32c  # [win]
        - libcurl    # [win]
        - libgrpc
        - libprotobuf
        - libutf8proc
        - lz4-c
        # gandiva depends on openssl
        - openssl
        - orc          # [unix]
        - rapidjson
        - re2
        - snappy
        - thrift-cpp
        - xsimd
        - zlib
        - zstd
      run_constrained:
        - apache-arrow-proc =*={{ build_ext }}
        - cudatoolkit >={{ cuda_compiler_version_min }}  # [cuda_compiler_version != "None"]
        # make sure we don't co-install with old version of old package name
        - arrow-cpp ={{ version }}

    about:
      home: http://github.com/apache/arrow
      license: Apache-2.0
      license_file:
        - LICENSE.txt
      summary: C++ libraries for Apache Arrow

    test:
      commands:
        # headers
        - test -f $PREFIX/include/arrow/api.h              # [unix]
        - test -f $PREFIX/include/arrow/flight/types.h     # [unix]
        - test -f $PREFIX/include/arrow/flight/sql/api.h   # [unix]
        - test -f $PREFIX/include/plasma/client.h          # [unix]
        - test -f $PREFIX/include/gandiva/engine.h         # [unix]
        - test -f $PREFIX/include/parquet/api/reader.h     # [unix]
        - if not exist %LIBRARY_INC%\\arrow\\api.h exit 1            # [win]
        - if not exist %LIBRARY_INC%\\gandiva\\engine.h exit 1       # [win]
        - if not exist %LIBRARY_INC%\\parquet\\api\\reader.h exit 1  # [win]

        # shared
        - test -f $PREFIX/lib/libarrow.so             # [linux]
        - test -f $PREFIX/lib/libarrow_dataset.so     # [linux]
        - test -f $PREFIX/lib/libarrow_flight.so      # [linux]
        - test -f $PREFIX/lib/libarrow_flight_sql.so  # [linux]
        - test -f $PREFIX/lib/libparquet.so           # [linux]
        - test -f $PREFIX/lib/libgandiva.so           # [linux]
        - test -f $PREFIX/lib/libplasma.so            # [linux]
        - test -f $PREFIX/lib/libarrow_cuda${SHLIB_EXT}               # [(cuda_compiler_version != "None") and unix]
        - test ! -f $PREFIX/lib/libarrow_cuda${SHLIB_EXT}             # [(cuda_compiler_version == "None") and unix]
        - if not exist %PREFIX%\\Library\\bin\\arrow_cuda.dll exit 1  # [(cuda_compiler_version != "None") and win]
        - if exist %PREFIX%\\Library\\bin\\arrow_cuda.dll exit 1      # [(cuda_compiler_version == "None") and win]
        - test -f $PREFIX/lib/libarrow.dylib          # [osx]
        - test -f $PREFIX/lib/libarrow_dataset.dylib  # [osx]
        - test -f $PREFIX/lib/libgandiva.dylib        # [osx]
        - test -f $PREFIX/lib/libparquet.dylib        # [osx]
        - test -f $PREFIX/lib/libplasma.dylib         # [osx]
        - if not exist %PREFIX%\\Library\\bin\\arrow.dll exit 1          # [win]
        - if not exist %PREFIX%\\Library\\bin\\arrow_dataset.dll exit 1  # [win]
        - if not exist %PREFIX%\\Library\\bin\\arrow_flight.dll exit 1   # [win]
        - if not exist %PREFIX%\\Library\\bin\\parquet.dll exit 1        # [win]
        - if not exist %PREFIX%\\Library\\bin\\gandiva.dll exit 1        # [win]

        # absence of static libraries
        - test ! -f $PREFIX/lib/libarrow.a             # [unix]
        - test ! -f $PREFIX/lib/libarrow_dataset.a     # [unix]
        - test ! -f $PREFIX/lib/libarrow_flight.a      # [unix]
        - test ! -f $PREFIX/lib/libarrow_flight_sql.a  # [unix]
        - test ! -f $PREFIX/lib/libplasma.a            # [unix]
        - test ! -f $PREFIX/lib/libparquet.a           # [unix]
        - test ! -f $PREFIX/lib/libgandiva.a           # [unix]
        - if exist %PREFIX%\\Library\\lib\\arrow_static.lib exit 1             # [win]
        - if exist %PREFIX%\\Library\\lib\\arrow_dataset_static.lib exit 1     # [win]
        - if exist %PREFIX%\\Library\\lib\\arrow_flight_static.lib exit 1      # [win]
        - if exist %PREFIX%\\Library\\lib\\arrow_flight_sql_static.lib exit 1  # [win]
        - if exist %PREFIX%\\Library\\lib\\parquet_static.lib exit 1           # [win]
        - if exist %PREFIX%\\Library\\lib\\gandiva_static.lib exit 1           # [win]

  # compat output for old naming scheme; switched for 10.0.0; keep for a few versions
  - name: arrow-cpp
    version: {{ version }}
    build:
      string: h{{ PKG_HASH }}_{{ PKG_BUILDNUM }}_{{ build_ext }}
      run_exports:
        - {{ pin_subpackage("libarrow", max_pin="x.x.x") }}
    requirements:
      host:
        # make sure the builds for different openssl versions (with the same PKG_BUILDNUM) have different hashes
        - openssl
        - {{ pin_subpackage('libarrow', exact=True) }}
      run:
        - {{ pin_subpackage('libarrow', exact=True) }}
    test:
      commands:
        - exit 0

  - name: pyarrow
    script: build-pyarrow.sh  # [not win]
    script: bld-pyarrow.bat   # [win]
    version: {{ version }}
    build:
      string: py{{ CONDA_PY }}h{{ PKG_HASH }}_{{ PKG_BUILDNUM }}_{{ build_ext }}
      ignore_run_exports:
        - cudatoolkit
      ignore_run_exports_from:
        - openssl
      track_features: {{ "[arrow-cuda]" if cuda_enabled else "" }}
      missing_dso_whitelist:
        # not actually missing, but installed into SP_DIR, see tests
        - "*/libarrow_python.so.*"            # [linux]
        - "*/libarrow_python_flight.so.*"     # [linux]
        - "*/libarrow_python.*.dylib"         # [osx]
        - "*/libarrow_python_flight.*.dylib"  # [osx]
        - "*/arrow_python.dll"                # [win]
        - "*/arrow_python_flight.dll"         # [win]
    requirements:
      build:
        - python                                 # [build_platform != target_platform]
        - cross-python_{{ target_platform }}     # [build_platform != target_platform]
        - cython                                 # [build_platform != target_platform]
        - numpy                                  # [build_platform != target_platform]
        - cmake
        - ninja
        - make  # [unix]
        - {{ compiler('c') }}
        - {{ compiler('cxx') }}
        # pyarrow does not require nvcc but it needs to link against libraries in libarrow=*=*cuda
        - {{ compiler("cuda") }}  # [cuda_compiler_version != "None"]
      host:
        - {{ pin_subpackage('libarrow', exact=True) }}
        - clangdev {{ llvm_version }}
        - llvmdev {{ llvm_version }}
        - cython
        - gflags  # [unix]
        - numpy
        - openssl
        - python
        - setuptools
        - setuptools_scm
        - six
      run:
        - {{ pin_subpackage('libarrow', exact=True) }}
        - {{ pin_compatible('numpy') }}
        # empty parquet-cpp metapackage, force old versions to be uninstalled
        - parquet-cpp 1.5.1.*
        - python
      run_constrained:
        - apache-arrow-proc =*={{ build_ext }}
        - cudatoolkit >={{ cuda_compiler_version_min }}  # [cuda_compiler_version != "None"]

    about:
      home: http://github.com/apache/arrow
      license: Apache-2.0
      license_file:
        - LICENSE.txt
      summary: Python libraries for Apache Arrow

    test:
      files:
        - test_read_parquet.py
      imports:
        - pyarrow
        - pyarrow.dataset
        - pyarrow.flight
        - pyarrow.gandiva
        - pyarrow.orc      # [unix]
        - pyarrow.parquet
        - pyarrow.plasma   # [unix]
        - pyarrow.fs
        - pyarrow._s3fs
        - pyarrow._hdfs
        # We can only test importing cuda package but cannot run when a
        # CUDA device is not available, for instance, when building from CI.
        # On Windows, we cannot even do that due to `nvcuda.dll` not being found, see
        # https://conda-forge.org/docs/maintainer/knowledge_base.html#nvcuda-dll-cannot-be-found-on-windows
        # However, we check below for (at least) the presence of a correctly-compiled module
        - pyarrow.cuda     # [cuda_compiler_version != "None" and not win]
      commands:
        # libraries that depend on python (and hence aren't in libarrow itself)
        - test -f ${SP_DIR}/pyarrow/libarrow_python.so                            # [linux]
        - test -f ${SP_DIR}/pyarrow/libarrow_python_flight.so                     # [linux]
        - test -f ${SP_DIR}/pyarrow/libarrow_python.dylib                         # [osx]
        - test -f ${SP_DIR}/pyarrow/libarrow_python_flight.dylib                  # [osx]
        - if not exist %SP_DIR%\pyarrow\arrow_python.dll exit 1                   # [win]
        - if not exist %SP_DIR%\pyarrow\arrow_python_flight.dll exit 1            # [win]

        - test ! -f ${SP_DIR}/pyarrow/tests/test_array.py                         # [unix]
        - if exist %SP_DIR%/pyarrow/tests/test_array.py exit 1                    # [win]
        # Need to remove dot from PY_VER; %MYVAR:x=y% replaces "x" in %MYVAR% with "y"
        - if not exist %SP_DIR%/pyarrow/_cuda.cp%PY_VER:.=%-win_amd64.pyd exit 1  # [win and cuda_compiler_version != "None"]
        - python test_read_parquet.py

  - name: pyarrow-tests
    script: build-pyarrow.sh  # [not win]
    script: bld-pyarrow.bat   # [win]
    version: {{ version }}
    build:
      string: py{{ CONDA_PY }}h{{ PKG_HASH }}_{{ PKG_BUILDNUM }}_{{ build_ext }}
      ignore_run_exports:
        - cudatoolkit
      ignore_run_exports_from:
        - openssl
      track_features: {{ "[arrow-cuda]" if cuda_enabled else "" }}
    requirements:
      build:
        - python                                 # [build_platform != target_platform]
        - cross-python_{{ target_platform }}     # [build_platform != target_platform]
        - cython                                 # [build_platform != target_platform]
        - numpy                                  # [build_platform != target_platform]
        - cmake
        - ninja
        - make  # [unix]
        - {{ compiler('c') }}
        - {{ compiler('cxx') }}
        # pyarrow does not require nvcc but it needs to link against libraries in libarrow=*=*cuda
        - {{ compiler("cuda") }}  # [cuda_compiler_version != "None"]
      host:
        - {{ pin_subpackage('libarrow', exact=True) }}
        - {{ pin_subpackage('pyarrow', exact=True) }}
        - clangdev {{ llvm_version }}
        - llvmdev {{ llvm_version }}
        - cython
        - numpy
        - openssl
        - python
        - setuptools
        - setuptools_scm
        - six
      run:
        - {{ pin_subpackage('pyarrow', exact=True) }}
        - python
      run_constrained:
        - apache-arrow-proc =*={{ build_ext }}
        - cudatoolkit >={{ cuda_compiler_version_min }}  # [cuda_compiler_version != "None"]

    about:
      home: http://github.com/apache/arrow
      license: Apache-2.0
      license_file:
        - LICENSE.txt
      summary: Python test files for Apache Arrow

    test:
      commands:
        - test -f ${SP_DIR}/pyarrow/tests/test_array.py             # [unix]
        - if not exist %SP_DIR%/pyarrow/tests/test_array.py exit 1  # [win]

about:
  home: http://github.com/apache/arrow
  license: Apache-2.0
  license_file:
    - LICENSE.txt
  summary: C++ and Python libraries for Apache Arrow

extra:
  recipe-maintainers:
    - wesm
    - xhochy
    - leifwalsh
    - jreback
    - cpcloud
    - pcmoritz
    - robertnishihara
    - siddharthteotia
    - kou
    - kszucs
    - pitrou
    - pearu
    - nealrichardson
    - jakirkham
    - h-vetinari
  feedstock-name: arrow-cpp
